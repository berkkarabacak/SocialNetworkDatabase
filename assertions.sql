/************* ASSERTION 1 *************/
CREATE TRIGGER ASSERTION_1 ON MEMBER_PROFILE
INSTEAD OF INSERT, UPDATE
AS
BEGIN
	DECLARE @PROFILE_ID INT;
	SELECT @PROFILE_ID = i.Profile_id FROM inserted i;

	DECLARE @CURR_JOB INT;
	SELECT @CURR_JOB = i.Current_job FROM inserted i;

	DECLARE @CURR_SCHOOL INT;
	SELECT @CURR_SCHOOL = i.Current_school FROM inserted i;

	DECLARE @PROFILE_CV_ID INT;
	SELECT @PROFILE_CV_ID = (SELECT TOP 1 Cv_id FROM CV WHERE Profile_id = @PROFILE_ID);

	IF(@CURR_JOB IS NOT NULL)
	BEGIN
		DECLARE @CV_ID INT;
		SET @CV_ID = (SELECT TOP 1 Cv_id FROM JOB_EXPERIENCE WHERE Job_id = @CURR_JOB);

		IF @CV_ID <> @PROFILE_CV_ID
		BEGIN
			RAISERROR('Current job info must belong to Profile owner''s CV', 16, 1);
			RETURN;
		END
	END

	IF(@CURR_SCHOOL IS NOT NULL)
	BEGIN
		SET @CV_ID = (SELECT TOP 1 Cv_id FROM EDUCATION_INFO WHERE Education_info_id = @CURR_SCHOOL);

		IF @CV_ID <> @PROFILE_CV_ID
		BEGIN
			RAISERROR('Current school info must belong to Profile owner''s CV', 16, 1);
			RETURN;
		END
	END

	IF EXISTS(SELECT * FROM deleted)
	BEGIN
		DECLARE @DELETED_ID INT;
		SELECT @DELETED_ID = d.Profile_id FROM deleted d;
		DELETE FROM MEMBER_PROFILE WHERE Profile_id = @DELETED_ID;
	END

	SET IDENTITY_INSERT MEMBER_PROFILE ON;
	INSERT INTO MEMBER_PROFILE SELECT * FROM inserted;
	SET IDENTITY_INSERT MEMBER_PROFILE OFF;
END

GO

/************* ASSERTION 2 *************/
CREATE TRIGGER ASSERTION_2 ON MESSAGE
INSTEAD OF INSERT, UPDATE
AS
BEGIN
	DECLARE @SENT_BY INT;
	SELECT @SENT_BY = i.Sent_by FROM inserted i;

	DECLARE @CONVERSATION_ID INT;
	SELECT @CONVERSATION_ID = i.Conversation_id FROM inserted i;

	DECLARE @MEMBER_1 INT;
	SET @MEMBER_1 = (SELECT TOP 1 Member_1_id FROM CONVERSATION WHERE Conversation_id = @CONVERSATION_ID);

	DECLARE @MEMBER_2 INT;
	SET @MEMBER_2 = (SELECT TOP 1 Member_2_id FROM CONVERSATION WHERE Conversation_id = @CONVERSATION_ID);

	IF @SENT_BY <> @MEMBER_1 AND @SENT_BY <> @MEMBER_2
	BEGIN
		RAISERROR('Sender of message must be one of the members of conversation.', 16, 1);
		RETURN;
	END

	IF EXISTS(SELECT * FROM deleted)
	BEGIN
		DECLARE @DATE_SENT DATETIME;
		SELECT @DATE_SENT = d.Date_sent FROM deleted d;
		SELECT @CONVERSATION_ID = d.Conversation_id FROM deleted d;
		SELECT @SENT_BY = d.Sent_by FROM deleted d;
		DELETE FROM MESSAGE WHERE Date_sent = @DATE_SENT AND Conversation_id = @CONVERSATION_ID AND Sent_by = @SENT_BY;
	END


	SET IDENTITY_INSERT MESSAGE ON;
	INSERT INTO MESSAGE SELECT * FROM inserted;
	SET IDENTITY_INSERT MESSAGE OFF;
END

GO

/************* ASSERTION 3 *************/

CREATE TRIGGER ASSERTION_3 ON CONNECTION
INSTEAD OF INSERT, UPDATE
AS
BEGIN
	DECLARE @MEMBER_1_ID INT;
	SELECT @MEMBER_1_ID = i.Member_1_id FROM inserted i;

	DECLARE @MEMBER_2_ID INT;
	SELECT @MEMBER_2_ID = i.Member_2_id FROM inserted i;

	IF EXISTS(SELECT * FROM CONNECTION WHERE Member_1_id = @MEMBER_2_ID AND Member_2_id = @MEMBER_1_ID)
	BEGIN
		RAISERROR('There''s already a connection between these members.', 16, 1);
		RETURN;
	END

	IF EXISTS(SELECT * FROM deleted)
	BEGIN
		SELECT @MEMBER_1_ID = d.Member_1_id FROM deleted d;
		SELECT @MEMBER_2_ID = d.Member_2_id FROM deleted d;

		DELETE FROM CONNECTION WHERE Member_1_id = @MEMBER_1_ID AND Member_2_id = @MEMBER_2_ID;
	END

	SET IDENTITY_INSERT CONNECTION ON;
	INSERT INTO CONNECTION SELECT * FROM inserted;
	SET IDENTITY_INSERT CONNECTION OFF;
END