CREATE TABLE MEMBER
(
	Member_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Password CHAR(25) NOT NULL CHECK (LEN(Password) >= 6),
	First_name NVARCHAR(25) NOT NULL,
	Middle_name NVARCHAR(25) NULL,
	Last_name NVARCHAR(25) NOT NULL,
	E_mail NVARCHAR(45) NOT NULL UNIQUE,
	Active BIT NOT NULL,
	Online BIT NOT NULL,
	Created_at DATETIME NOT NULL DEFAULT GETDATE(),
	Profile_id INT NULL,
);

CREATE TABLE PRIVACY_TYPE
(
	Privacy_type_id TINYINT NOT NULL PRIMARY KEY,
	Name VARCHAR(40)
);

CREATE TABLE TIMELINE
(
	Timeline_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Privacy TINYINT NOT NULL FOREIGN KEY REFERENCES PRIVACY_TYPE(Privacy_type_id) DEFAULT 0
);

CREATE TABLE COUNTRY
(
	Country_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Country_name NVARCHAR(30) UNIQUE
);

CREATE TABLE CITY
(
	City_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Country_id INT NOT NULL FOREIGN KEY REFERENCES COUNTRY(Country_id),
	City_name NVARCHAR(30)
);

CREATE TABLE LANGUAGE
(
	Language_id TINYINT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Language_name NVARCHAR(25)
);

CREATE TABLE ORGANIZATION
(
	Organization_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Organization_name NVARCHAR(40) NOT NULL,
	Description NVARCHAR(255) NULL
);

CREATE TABLE CV
(
	Cv_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Summary NVARCHAR(255) NULL,
	Interests NVARCHAR(255) NULL,
	Profile_id INT NOT NULL
);

CREATE TABLE CV_SKILLS
(
	Cv_id INT NOT NULL FOREIGN KEY REFERENCES CV(Cv_id),
	Skill NVARCHAR(50) NOT NULL,
	CONSTRAINT PK_SKILL PRIMARY KEY(Cv_id, Skill)
);

CREATE TABLE JOB_EXPERIENCE
(
	Job_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	--Member_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),-- ON DELETE CASCADE,
	Position NVARCHAR(30) NULL,
	Organization INT NULL FOREIGN KEY REFERENCES ORGANIZATION(Organization_id) ON DELETE SET NULL,
	Location INT NULL FOREIGN KEY REFERENCES CITY(City_id),
	Date_started DATE NOT NULL,
	Date_left DATE NULL,
	Cv_id INT FOREIGN KEY REFERENCES CV(Cv_id)-- ON DELETE CASCADE
);
/*
CREATE TABLE NICKNAME
(
	--Nickname_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Profile_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER_PROFILE(Profile_id),
	Nickname NVARCHAR(100),
	Privacy TINYINT NOT NULL FOREIGN KEY REFERENCES PRIVACY_TYPE(Privacy_type_id) DEFAULT 0
	CONSTRAINT PK_NICK PRIMARY
);*/

CREATE TABLE RELATIONSHIP_STATUS
(
	Status_id TINYINT NOT NULL PRIMARY KEY,
	Name NVARCHAR(40) NOT NULL
);

CREATE TABLE EDUCATION_INFO
(
	Education_info_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	--Member_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),-- ON DELETE CASCADE,
	School_name NVARCHAR(50) NOT NULL,
	Department_name NVARCHAR(50) NULL,
	Starting_date DATE NOT NULL,
	Graduation_date DATE NULL,
	Graduated BIT NOT NULL DEFAULT 0,
	Privacy TINYINT NOT NULL FOREIGN KEY REFERENCES PRIVACY_TYPE(Privacy_type_id) DEFAULT 0,
	Cv_id INT FOREIGN KEY REFERENCES CV(Cv_id)-- ON DELETE CASCADE
);

CREATE TABLE MEMBER_PROFILE
(
	Profile_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Privacy TINYINT NOT NULL FOREIGN KEY REFERENCES PRIVACY_TYPE(Privacy_type_id) DEFAULT 0,
	Date_of_birth DATE NULL,
	About NVARCHAR(255) NULL,
	Relationship_status_code TINYINT NULL FOREIGN KEY REFERENCES RELATIONSHIP_STATUS(Status_id),
	In_a_relationship_with INT NULL FOREIGN KEY REFERENCES MEMBER(Member_id) ON DELETE SET NULL,
	Phone_number VARCHAR(30) NULL,
	Gender CHAR NULL CHECK (Gender = 'M' OR Gender = 'F'),
	Created_at DATETIME NOT NULL DEFAULT GETDATE(),
	Updated_at DATETIME NOT NULL DEFAULT GETDATE(),
	Current_job INT NULL FOREIGN KEY REFERENCES JOB_EXPERIENCE(Job_id) ON DELETE SET NULL,
	Current_school INT NULL FOREIGN KEY REFERENCES EDUCATION_INFO(Education_info_id) ON DELETE SET NULL,
	Religion NVARCHAR(40) NULL,
	Homeland INT NULL FOREIGN KEY REFERENCES CITY(City_id),
	Lives_in INT NULL FOREIGN KEY REFERENCES CITY(City_id),
	Language TINYINT NOT NULL FOREIGN KEY REFERENCES LANGUAGE(Language_id) DEFAULT 1,
	Nickname NVARCHAR(50) NULL,
	Timeline_id INT NULL FOREIGN KEY REFERENCES TIMELINE(Timeline_id) ON DELETE SET NULL,
	--Cv_id INT NULL FOREIGN KEY REFERENCES CV(Cv_id),-- ON DELETE SET NULL,
	Profile_pic_url NVARCHAR(255) NULL,
	Cover_pic_url NVARCHAR(255) NULL,
	CONSTRAINT CHCK_MEMBER CHECK(NOT(Relationship_status_code <> 1 AND Relationship_status_code <> 2  AND Relationship_status_code <> 3  AND In_a_relationship_with IS NOT NULL))
);

ALTER TABLE MEMBER
ADD CONSTRAINT FK_PROFILE_MEMBER FOREIGN KEY(Profile_id) REFERENCES MEMBER_PROFILE(Profile_id) ON DELETE SET NULL;

ALTER TABLE CV
ADD CONSTRAINT FK_CV_PROFILE FOREIGN KEY(Profile_id) REFERENCES MEMBER_PROFILE(Profile_id);

CREATE TABLE EXTENSION_CATEGORIES
(
	Category_id SMALLINT NOT NULL PRIMARY KEY,
	Name NVARCHAR(25) NOT NULL
);

CREATE TABLE PROFILE_EXTENSIONS
(
	Profile_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER_PROFILE(Profile_id),-- ON DELETE CASCADE,
	Name NVARCHAR(50) NOT NULL,
	Category_id SMALLINT NOT NULL FOREIGN KEY REFERENCES EXTENSION_CATEGORIES(Category_id),
	CONSTRAINT PK_PROFILE_EXT PRIMARY KEY(Profile_id, Name, Category_id)
);

CREATE TABLE ADDRESSES
(
	Address_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Profile_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER_PROFILE(Profile_id),-- ON DELETE CASCADE,
	Line_1 NVARCHAR(100) NULL,
	Line_2 NVARCHAR(100) NULL,
	City INT NULL FOREIGN KEY REFERENCES CITY(City_id),
	Zip_code VARCHAR(10) NULL,
	Privacy TINYINT NOT NULL FOREIGN KEY REFERENCES PRIVACY_TYPE(Privacy_type_id) DEFAULT 0,
);

CREATE TABLE POST
(
	Post_id BIGINT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Created_at DATETIME NOT NULL DEFAULT GETDATE(),
);

CREATE TABLE STATUS
(
	Status_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Text NVARCHAR(255),
	Sent_by INT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),
	--Created_at DATETIME NOT NULL DEFAULT GETDATE(),
	Privacy TINYINT NOT NULL FOREIGN KEY REFERENCES PRIVACY_TYPE(Privacy_type_id) DEFAULT 0,
	Timeline_id INT NOT NULL FOREIGN KEY REFERENCES TIMELINE(Timeline_id),-- ON DELETE CASCADE,
	Post_id BIGINT NULL FOREIGN KEY REFERENCES POST(Post_id),-- ON DELETE CASCADE,
);

CREATE TABLE COMMENT
(
	Comment_id BIGINT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Status_id INT NOT NULL FOREIGN KEY REFERENCES STATUS(Status_id),-- ON DELETE CASCADE,
	Text NVARCHAR(255),
	--Created_at DATETIME NOT NULL DEFAULT GETDATE(),
	Sent_by INT NULL FOREIGN KEY REFERENCES MEMBER(Member_id) ON DELETE CASCADE,
	Post_id BIGINT NULL FOREIGN KEY REFERENCES POST(Post_id)
);

CREATE TABLE LIKES
(
	--Like_id BIGINT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Post_id BIGINT NOT NULL FOREIGN KEY REFERENCES POST(Post_id),-- ON DELETE CASCADE UNIQUE,
	Member_id  INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),-- ON DELETE CASCADE,
	CONSTRAINT PK_LIKE PRIMARY KEY(Post_id, Member_id)
);

CREATE TABLE CONNECTION
(
	Member_1_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),
	Member_2_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),
	CONSTRAINT PK_CONNECTION PRIMARY KEY(Member_1_id, Member_2_id),
	Date_connection_made DATETIME NOT NULL DEFAULT GETDATE()
);

CREATE TABLE CONVERSATION
(
	Conversation_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Member_1_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),
	Member_2_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),
	CONSTRAINT UN_CONVERSATION UNIQUE(Member_1_id, Member_2_id),
	Date_conversation_started DATETIME NOT NULL DEFAULT GETDATE(),
	CONSTRAINT CHCK_CONV CHECK(Member_1_id <> Member_2_id)
);

CREATE TABLE MESSAGE
(
	Conversation_id INT NOT NULL FOREIGN KEY REFERENCES CONVERSATION (Conversation_id),-- ON DELETE CASCADE,
	Date_sent DATETIME NOT NULL DEFAULT GETDATE(),
	Sent_by INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),-- ON DELETE CASCADE,
	CONSTRAINT PK_MESSAGE PRIMARY KEY(Conversation_id, Date_sent, Sent_by),
	Text NVARCHAR(255) NOT NULL,
	Date_seen DATETIME NULL
);

CREATE TABLE MEMBER_BEING_FOLLOWED
(
	Follower_member_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),
	Member_being_followed_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),
	Date_started_following DATETIME NOT NULL DEFAULT GETDATE(),
	CONSTRAINT PK_FOLLOW PRIMARY KEY (Follower_member_id, Member_being_followed_id, Date_started_following),
	Date_stopped_following DATETIME NULL,
);

CREATE TABLE RECOMMENDATION
(
	Member_recommending INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),
	Member_being_recommended INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),
	Recommendation_text NVARCHAR(255),
	Date_of_recommendation DATETIME NOT NULL DEFAULT GETDATE(),
	CONSTRAINT PK_RECOMMENDATION PRIMARY KEY(Member_recommending, Member_being_recommended)
);

CREATE TABLE GROUPS
(
	Group_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Created_by INT NULL FOREIGN KEY REFERENCES MEMBER(Member_id) ON DELETE SET NULL,
	Group_name NVARCHAR(30) NOT NULL,
	Group_description NVARCHAR(255) NULL,
	Group_date_started DATETIME NOT NULL DEFAULT GETDATE(),
	Group_date_ended DATETIME NULL,
	Timeline_id INT NULL FOREIGN KEY REFERENCES TIMELINE(Timeline_id) ON DELETE SET NULL,
);

CREATE TABLE MEMBERS_GROUPS
(
	Member_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),-- ON DELETE CASCADE,
	Group_id INT NOT NULL FOREIGN KEY REFERENCES GROUPS(Group_id),-- ON DELETE CASCADE,
	CONSTRAINT PK_MEMBERS_GROUPS PRIMARY KEY (Member_id, Group_id),
	Date_joined DATETIME NOT NULL DEFAULT GETDATE(),
	Date_left DATETIME NULL
);

CREATE TABLE NOTIFICATION
(
	Notification_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Member_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),-- ON DELETE CASCADE,
	Message NVARCHAR(255) NOT NULL,
	Created_at DATETIME NOT NULL DEFAULT GETDATE(),
);

CREATE TABLE EVENTS
(
	Event_id SMALLINT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Description NVARCHAR(255),
	Event_date DATETIME NOT NULL DEFAULT GETDATE(),
	Timeline_id INT NULL FOREIGN KEY REFERENCES TIMELINE(Timeline_id) ON DELETE SET NULL,
	Created_by INT NULL FOREIGN KEY REFERENCES MEMBER(Member_id) ON DELETE SET NULL,
	Location NVARCHAR(100),
);

CREATE TABLE MEMBERS_INVITED_EVENT
(
	Event_id SMALLINT NOT NULL FOREIGN KEY REFERENCES EVENTS(Event_id),-- ON DELETE CASCADE,
	Member_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),-- ON DELETE CASCADE,
	CONSTRAINT PK_MEMB_INV_EVENT PRIMARY KEY(Event_id, Member_id),
	Invited_by INT NULL FOREIGN KEY REFERENCES MEMBER(Member_id) ON DELETE SET NULL,
	Date_invited DATETIME NOT NULL DEFAULT GETDATE(),
	Is_participating BIT NULL
);

CREATE TABLE PROFICIENCY_STATUS
(
	Proficiency_id TINYINT NOT NULL PRIMARY KEY,
	Proficiency NVARCHAR(100) NOT NULL
);

CREATE TABLE LANGUAGES_KNOWN
(
	Cv_id INT NOT NULL FOREIGN KEY REFERENCES CV(Cv_id),-- ON DELETE CASCADE,
	Language_name NVARCHAR(50) NOT NULL,
	CONSTRAINT PK_LANG_KNOWN PRIMARY KEY(Cv_id, Language_name),
	Proficiency TINYINT FOREIGN KEY REFERENCES PROFICIENCY_STATUS(Proficiency_id)
);

/*CREATE TABLE CERTIFICATION
(
	Certification_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Certification_name NVARCHAR(100) NOT NULL,
	License_number NVARCHAR(30) NULL,
	Certification_url NVARCHAR(50) NULL,
	Date_given DATE NULL,
	Expiration_date DATE NULL,
	Given_by INT NULL FOREIGN KEY REFERENCES ORGANIZATION(Organization_id) ON DELETE SET NULL,
	Cv_id INT NOT NULL FOREIGN KEY REFERENCES CV(Cv_id) ON DELETE CASCADE,
);*/

CREATE TABLE PROJECT
(
	Project_id INT NOT NULL PRIMARY KEY IDENTITY(1,1),
	Project_name NVARCHAR(100) NOT NULL,
	Project_date DATE NULL,
	Project_url NVARCHAR(100) NULL,
	Description NVARCHAR(255) NULL,
	Cv_id INT NOT NULL FOREIGN KEY REFERENCES CV(Cv_id)-- ON DELETE CASCADE,
);

CREATE TABLE PROJECT_MEMBERS
(
	Project_id INT NOT NULL FOREIGN KEY REFERENCES PROJECT(Project_id),-- ON DELETE CASCADE,
	Member_id INT NOT NULL FOREIGN KEY REFERENCES MEMBER(Member_id),-- ON DELETE CASCADE,
	CONSTRAINT PK_PROJ_MEMBERS PRIMARY KEY(Project_id, Member_id)
);